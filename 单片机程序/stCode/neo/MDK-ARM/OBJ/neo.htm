<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OBJ\neo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OBJ\neo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Feb 12 00:42:16 2018
<BR><P>
<H3>Maximum Stack Usage =       6360 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; my_main &rArr; ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int) &rArr; Alg_Base58Decode &rArr; bigpow &rArr; bigmul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[15]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">NMI_Handler</a><BR>
 <LI><a href="#[17]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">MemManage_Handler</a><BR>
 <LI><a href="#[18]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">BusFault_Handler</a><BR>
 <LI><a href="#[19]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">UsageFault_Handler</a><BR>
 <LI><a href="#[1a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SVC_Handler</a><BR>
 <LI><a href="#[1b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">PendSV_Handler</a><BR>
 <LI><a href="#[30]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">CUSTOM_HID_DeInit_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_DeInit_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[11]">CUSTOM_HID_Init_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_Init_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[13]">CUSTOM_HID_OutEvent_FS</a> from usbd_custom_hid_if.o(i.CUSTOM_HID_OutEvent_FS) referenced 2 times from usbd_custom_hid_if.o(.data)
 <LI><a href="#[6c]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">EXTI0_IRQHandler</a> from aw9136.o(i.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">EXTI2_IRQHandler</a> from aw9136.o(i.EXTI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">HardFault_Handler</a> from forprintf.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">OTG_FS_IRQHandler</a> from irq_handler.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">SysTick_Handler</a> from irq_handler.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[20]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">USART2_IRQHandler</a> from irq_handler.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">USBD_CUSTOM_HID_DataIn</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DataIn) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[7]">USBD_CUSTOM_HID_DataOut</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DataOut) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[3]">USBD_CUSTOM_HID_DeInit</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_DeInit) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[5]">USBD_CUSTOM_HID_EP0_RxReady</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_EP0_RxReady) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[8]">USBD_CUSTOM_HID_GetCfgDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetCfgDesc) referenced 6 times from usbd_customhid.o(.data)
 <LI><a href="#[9]">USBD_CUSTOM_HID_GetDeviceQualifierDesc</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_GetDeviceQualifierDesc) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[2]">USBD_CUSTOM_HID_Init</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_Init) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[4]">USBD_CUSTOM_HID_Setup</a> from usbd_customhid.o(i.USBD_CUSTOM_HID_Setup) referenced 2 times from usbd_customhid.o(.data)
 <LI><a href="#[f]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[a]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[b]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[c]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[d]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[e]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[19]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[73]">__sti___10_myMain_cpp_Disp</a> from mymain.o(i.__sti___10_myMain_cpp_Disp) referenced from mymain.o(.init_array)
 <LI><a href="#[72]">fputc</a> from forprintf.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[6f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[71]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[220]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[75]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[221]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[77]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[222]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[223]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[224]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[225]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawxNumber(int, int, long long, int, view::FONT_t)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawNumber(int, int, long long, int, view::FONT_t)
</UL>

<P><STRONG><a name="[16f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToDec
</UL>

<P><STRONG><a name="[226]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::GetPublicKey(bool)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGinit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRBG_AES128_Block_cipher_df
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Update
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecTOAddress
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGinit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_init_for_sign
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRBG_AES128_Block_cipher_df
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataReceiveHander
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::CreateDataQuest(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendHidFrame(unsigned short, unsigned short, unsigned, unsigned char*, unsigned char)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::AppendBytes(unsigned char*, int)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::PrivateKey(unsigned char*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
</UL>

<P><STRONG><a name="[227]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[228]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::Commands()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::Commands(unsigned short, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::CreateDataQuest(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendHidFrame(unsigned short, unsigned short, unsigned, unsigned char*, unsigned char)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::PrivateKey(unsigned char*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetAddressFromPublic
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigdiv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecTOAddress
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigpow
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PowerOn_SetFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Passport
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Count_Num
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Set_Flag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Address
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetAddressFromPublic
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Encode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Decode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigdiv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_EndHash
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripemd160
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecTOAddress
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base58_Encode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGinit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigpow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigmul
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Address
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Encode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Decode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strupr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert2to16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseArray
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Div
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToDec
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIndexFromBuff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecTOAddress
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base58_Encode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigpow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigadd
</UL>

<P><STRONG><a name="[21c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigdiv
</UL>

<P><STRONG><a name="[e9]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToDec
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecTOAddress
</UL>

<P><STRONG><a name="[10c]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Address
</UL>

<P><STRONG><a name="[74]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteLength
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMoney
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteLength
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMoney
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteLength
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMoney
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMoney
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMoney
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteLength
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[22b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[22c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[22d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[80]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[218]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[22f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[76]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[230]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[231]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>AES128_encrypt</STRONG> (Thumb, 776 bytes, Stack size 36 bytes, crypto.o(i.AES128_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AES128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRBG_AES128_Update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRBG_AES128_Block_cipher_df
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_DRBG_AES128_Generate
</UL>

<P><STRONG><a name="[e6]"></a>AES128_keyschedule_enc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, crypto.o(i.AES128_keyschedule_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AES128_keyschedule_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRBG_AES128_Block_cipher_df
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_DRBG_AES128_Generate
</UL>

<P><STRONG><a name="[8d]"></a>AW9136_Init</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, aw9136.o(i.AW9136_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AW9136_Init &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_pwron
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_LED_ON
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::HardwareInit()
</UL>

<P><STRONG><a name="[97]"></a>AW9136_LED_ON</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, aw9136.o(i.AW9136_LED_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AW9136_LED_ON &rArr; I2C_write_reg &rArr; IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
</UL>

<P><STRONG><a name="[99]"></a>AW9136_clear_intr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aw9136.o(i.AW9136_clear_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AW9136_clear_intr &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_eint_work
</UL>

<P><STRONG><a name="[9a]"></a>AW9136_eint_work</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, aw9136.o(i.AW9136_eint_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AW9136_eint_work &rArr; AW_NormalMode_Proc &rArr; AW91xx_Auto_Cali &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_SleepMode_Proc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_clear_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[92]"></a>AW9136_pwron</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, aw9136.o(i.AW9136_pwron))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AW9136_pwron &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
</UL>

<P><STRONG><a name="[9e]"></a>AW91xx_Auto_Cali</STRONG> (Thumb, 842 bytes, Stack size 72 bytes, aw9136.o(i.AW91xx_Auto_Cali))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AW91xx_Auto_Cali &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_SleepMode_Proc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
</UL>

<P><STRONG><a name="[9f]"></a>AW_LedReleaseTouch</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, aw9136.o(i.AW_LedReleaseTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AW_LedReleaseTouch &rArr; I2C_write_reg &rArr; IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
</UL>

<P><STRONG><a name="[96]"></a>AW_NormalMode</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, aw9136.o(i.AW_NormalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AW_NormalMode &rArr; I2C_write_reg &rArr; IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
</UL>

<P><STRONG><a name="[9c]"></a>AW_NormalMode_Proc</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, aw9136.o(i.AW_NormalMode_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AW_NormalMode_Proc &rArr; AW91xx_Auto_Cali &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_right_release
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_right_press
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_left_release
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_left_press
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_center_release
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_center_press
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_LedReleaseTouch
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW91xx_Auto_Cali
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_eint_work
</UL>

<P><STRONG><a name="[9b]"></a>AW_SleepMode_Proc</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, aw9136.o(i.AW_SleepMode_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AW_SleepMode_Proc &rArr; AW91xx_Auto_Cali &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_right_slip
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_left_slip
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_center_double
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW91xx_Auto_Cali
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_eint_work
</UL>

<P><STRONG><a name="[a6]"></a>AW_center_double</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aw9136.o(i.AW_center_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AW_center_double &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_SleepMode_Proc
</UL>

<P><STRONG><a name="[a3]"></a>AW_center_press</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aw9136.o(i.AW_center_press))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
</UL>

<P><STRONG><a name="[a2]"></a>AW_center_release</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aw9136.o(i.AW_center_release))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
</UL>

<P><STRONG><a name="[a1]"></a>AW_left_press</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aw9136.o(i.AW_left_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AW_left_press &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
</UL>

<P><STRONG><a name="[a0]"></a>AW_left_release</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aw9136.o(i.AW_left_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AW_left_release &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
</UL>

<P><STRONG><a name="[a8]"></a>AW_left_slip</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aw9136.o(i.AW_left_slip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AW_left_slip &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_SleepMode_Proc
</UL>

<P><STRONG><a name="[a5]"></a>AW_right_press</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aw9136.o(i.AW_right_press))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
</UL>

<P><STRONG><a name="[a4]"></a>AW_right_release</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aw9136.o(i.AW_right_release))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
</UL>

<P><STRONG><a name="[a7]"></a>AW_right_slip</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aw9136.o(i.AW_right_slip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AW_right_slip &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_SleepMode_Proc
</UL>

<P><STRONG><a name="[a9]"></a>AddBig</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, crypto.o(i.AddBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AddBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Moduli_Big
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_Moduli_Big
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZeroBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularAddBig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjAddPoints
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularInvBig
</UL>

<P><STRONG><a name="[b1]"></a>Alg_Base58Decode</STRONG> (Thumb, 530 bytes, Stack size 3144 bytes, getaddress.o(i.Alg_Base58Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4784<LI>Call Chain = Alg_Base58Decode &rArr; bigpow &rArr; bigmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToHex
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIndexFromBuff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigpow
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigmul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigadd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[ba]"></a>Alg_Base58Encode</STRONG> (Thumb, 94 bytes, Stack size 1048 bytes, getaddress.o(i.Alg_Base58Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2688<LI>Call Chain = Alg_Base58Encode &rArr; DecTOAddress &rArr; bigdiv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToString
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToDec
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecTOAddress
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[be]"></a>Alg_ECDSASignData</STRONG> (Thumb, 130 bytes, Stack size 160 bytes, encrypt.o(i.Alg_ECDSASignData))
<BR><BR>[Stack]<UL><LI>Max Depth = 2580<LI>Call Chain = Alg_ECDSASignData &rArr; ECCKeyPairSignGenerate &rArr; RNG_init_for_sign &rArr; RNGinit &rArr; DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crypto_DeInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EC_paraTestInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[c2]"></a>Alg_GetAddressFromPublic</STRONG> (Thumb, 206 bytes, Stack size 208 bytes, getaddress.o(i.Alg_GetAddressFromPublic))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = Alg_GetAddressFromPublic &rArr; Base58_Encode &rArr; DecTOAddress &rArr; bigdiv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripemd160
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base58_Encode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_HashData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[c6]"></a>Alg_GetPublicFromPrivate</STRONG> (Thumb, 338 bytes, Stack size 160 bytes, encrypt.o(i.Alg_GetPublicFromPrivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2404<LI>Call Chain = Alg_GetPublicFromPrivate &rArr; RNG_init_for_sign &rArr; RNGinit &rArr; DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGfree
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCsetPrivKeyValue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCsetPointGenerator
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCscalarMul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPrivKey
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPoint
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitEC
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCgetPointCoordinate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreePrivKey
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreePoint
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreeEC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crypto_DeInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_init_for_sign
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::GetPublicKey(bool)
</UL>

<P><STRONG><a name="[c3]"></a>Alg_HashData</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, encrypt.o(i.Alg_HashData))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Alg_HashData &rArr; HASH_DigestCompute &rArr; SHA256_Finish &rArr; SHA256Final &rArr; SHA256Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crypto_DeInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DigestCompute
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetAddressFromPublic
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base58_Encode
</UL>

<P><STRONG><a name="[d4]"></a>Alg_ShowSignData</STRONG> (Thumb, 5474 bytes, Stack size 896 bytes, showsign.o(i.Alg_ShowSignData))
<BR><BR>[Stack]<UL><LI>Max Depth = 3680<LI>Call Chain = Alg_ShowSignData &rArr; Base58_Encode &rArr; DecTOAddress &rArr; bigdiv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteLengthIndex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteLength
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMoney
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base58_Encode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[e0]"></a>Ascii2Dec</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, showsign.o(i.Ascii2Dec))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMoney
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToHex
</UL>

<P><STRONG><a name="[c5]"></a>Base58_Encode</STRONG> (Thumb, 174 bytes, Stack size 1144 bytes, getaddress.o(i.Base58_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 2784<LI>Call Chain = Base58_Encode &rArr; DecTOAddress &rArr; bigdiv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToString
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToDec
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecTOAddress
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_HashData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetAddressFromPublic
</UL>

<P><STRONG><a name="[dc]"></a>Big_to_W8</STRONG> (Thumb, 180 bytes, Stack size 12 bytes, crypto.o(i.Big_to_W8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Big_to_W8
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_to_fixedW8
</UL>

<P><STRONG><a name="[db]"></a>Big_to_fixedW8</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, crypto.o(i.Big_to_fixedW8))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Big_to_fixedW8 &rArr; Big_to_W8
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_to_W8
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAgetSignature
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCgetPrivKeyValue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCgetPointCoordinate
</UL>

<P><STRONG><a name="[ab]"></a>CompareBig</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, crypto.o(i.CompareBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CompareBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularFastMul2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularAddBig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularInvBig
</UL>

<P><STRONG><a name="[de]"></a>Con_4_byte</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, oled281.o(i.Con_4_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawHZ(int, int, int, view::FONT_HZ_t, bool)
</UL>

<P><STRONG><a name="[ac]"></a>CopyBig</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, crypto.o(i.CopyBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CopyBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCsetPointGenerator
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCcopyPoint
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Moduli_Big
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalize
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjAddPoints
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularInvBig
</UL>

<P><STRONG><a name="[f9]"></a>CountBits</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, crypto.o(i.CountBits))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
</UL>

<P><STRONG><a name="[d9]"></a>CountMoney</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, showsign.o(i.CountMoney))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = CountMoney &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ascii2Dec
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToString
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
</UL>

<P><STRONG><a name="[bf]"></a>Crypto_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, crypto.o(i.Crypto_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ECDSASignData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_HashData
</UL>

<P><STRONG><a name="[17a]"></a>DWORDFromLittleEndian</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ripemd160.o(i.DWORDFromLittleEndian))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DWORDFromLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDTransform
</UL>

<P><STRONG><a name="[21f]"></a>DWORDToLittleEndian</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ripemd160.o(i.DWORDToLittleEndian))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DWORDToLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_EndHash
</UL>

<P><STRONG><a name="[bd]"></a>DecTOAddress</STRONG> (Thumb, 218 bytes, Stack size 1056 bytes, showsign.o(i.DecTOAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = DecTOAddress &rArr; bigdiv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigdiv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseArray
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Encode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base58_Encode
</UL>

<P><STRONG><a name="[b8]"></a>DecToHex</STRONG> (Thumb, 154 bytes, Stack size 1560 bytes, showsign.o(i.DecToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = DecToHex &rArr; convert2to16
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert2to16
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseArray
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Div
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Decode
</UL>

<P><STRONG><a name="[eb]"></a>Div</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, showsign.o(i.Div))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Div
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex
</UL>

<P><STRONG><a name="[c1]"></a>ECCKeyPairSignGenerate</STRONG> (Thumb, 332 bytes, Stack size 176 bytes, encrypt.o(i.ECCKeyPairSignGenerate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2420<LI>Call Chain = ECCKeyPairSignGenerate &rArr; RNG_init_for_sign &rArr; RNGinit &rArr; DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGfree
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAinitSign
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAgetSignature
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAfreeSign
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCsetPrivKeyValue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPrivKey
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitEC
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCgetPrivKeyValue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreePrivKey
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreePoint
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_init_for_sign
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DigestCompute
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ECDSASignData
</UL>

<P><STRONG><a name="[f2]"></a>ECCcopyPoint</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, crypto.o(i.ECCcopyPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ECCcopyPoint &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjAddPoints
</UL>

<P><STRONG><a name="[d1]"></a>ECCfreeEC</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, crypto.o(i.ECCfreeEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ECCfreeEC
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StFreeBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
</UL>

<P><STRONG><a name="[d0]"></a>ECCfreePoint</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, crypto.o(i.ECCfreePoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ECCfreePoint
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StFreeBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
</UL>

<P><STRONG><a name="[cf]"></a>ECCfreePrivKey</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, crypto.o(i.ECCfreePrivKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ECCfreePrivKey
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StFreeBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[ce]"></a>ECCgetPointCoordinate</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, crypto.o(i.ECCgetPointCoordinate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ECCgetPointCoordinate &rArr; Big_to_fixedW8 &rArr; Big_to_W8
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_to_fixedW8
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
</UL>

<P><STRONG><a name="[ef]"></a>ECCgetPrivKeyValue</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, crypto.o(i.ECCgetPrivKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ECCgetPrivKeyValue &rArr; Big_to_fixedW8 &rArr; Big_to_W8
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_to_fixedW8
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[c8]"></a>ECCinitEC</STRONG> (Thumb, 440 bytes, Stack size 20 bytes, crypto.o(i.ECCinitEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ECCinitEC &rArr; W8_to_Big &rArr; SetZeroBig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W8_to_Big
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StFreeBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[c9]"></a>ECCinitPoint</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, crypto.o(i.ECCinitPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ECCinitPoint &rArr; InitBig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StFreeBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
</UL>

<P><STRONG><a name="[cb]"></a>ECCinitPrivKey</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, crypto.o(i.ECCinitPrivKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ECCinitPrivKey &rArr; InitBig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[cd]"></a>ECCscalarMul</STRONG> (Thumb, 230 bytes, Stack size 96 bytes, crypto.o(i.ECCscalarMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = ECCscalarMul &rArr; NAF_Binary_PointMul &rArr; MontyJacProjAddPoints &rArr; MontyJacProjDoublePoint &rArr; ModularFastMul2 &rArr; SubBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyKillAll
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
</UL>

<P><STRONG><a name="[ca]"></a>ECCsetPointGenerator</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, crypto.o(i.ECCsetPointGenerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ECCsetPointGenerator &rArr; InitBig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
</UL>

<P><STRONG><a name="[cc]"></a>ECCsetPrivKeyValue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, crypto.o(i.ECCsetPrivKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ECCsetPrivKeyValue &rArr; W8_to_Big &rArr; SetZeroBig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W8_to_Big
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[f1]"></a>ECDSAfreeSign</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, crypto.o(i.ECDSAfreeSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ECDSAfreeSign
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StFreeBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[f0]"></a>ECDSAgetSignature</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, crypto.o(i.ECDSAgetSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ECDSAgetSignature &rArr; Big_to_fixedW8 &rArr; Big_to_W8
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_to_fixedW8
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[ed]"></a>ECDSAinitSign</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, crypto.o(i.ECDSAinitSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ECDSAinitSign &rArr; StAllocBig
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StFreeBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[ee]"></a>ECDSAsign</STRONG> (Thumb, 1530 bytes, Stack size 144 bytes, crypto.o(i.ECDSAsign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1468<LI>Call Chain = ECDSAsign &rArr; RNGgenBytes &rArr; crl_DRBG_AES128_Generate &rArr; DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCsetPointGenerator
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPoint
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreePoint
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W8_to_Big
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGgenBytes
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyKillAll
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyExit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularInvBig
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[c0]"></a>EC_paraTestInit</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, encrypt.o(i.EC_paraTestInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EC_paraTestInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ECDSASignData
</UL>

<P><STRONG><a name="[24]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aw9136.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; AW9136_eint_work &rArr; AW_NormalMode_Proc &rArr; AW91xx_Auto_Cali &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aw9136.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; AW9136_eint_work &rArr; AW_NormalMode_Proc &rArr; AW91xx_Auto_Cali &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[100]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_Sectors
</UL>

<P><STRONG><a name="[18d]"></a>FastDiv2</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, crypto.o(i.FastDiv2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FastDiv2
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularInvBig
</UL>

<P><STRONG><a name="[103]"></a>Fill_Block</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, oled281.o(i.Fill_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Fill_Block &rArr; Set_Row_Address &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Write_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Row_Address
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::clearArea(int, int, int, int)
</UL>

<P><STRONG><a name="[107]"></a>Fill_RAM</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, oled281.o(i.Fill_RAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Fill_RAM &rArr; Set_Row_Address &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Write_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Row_Address
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED281_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::clearAll()
</UL>

<P><STRONG><a name="[b3]"></a>GetIndexFromBuff</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, showsign.o(i.GetIndexFromBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetIndexFromBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Decode
</UL>

<P><STRONG><a name="[108]"></a>Get_Count_Num</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stmflash.o(i.Get_Count_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Get_Count_Num
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PowerOn_Count
</UL>

<P><STRONG><a name="[10a]"></a>Get_Flash_Address</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, stmflash.o(i.Get_Flash_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Get_Flash_Address &rArr; STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[10d]"></a>Get_Flash_EMPTY</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stmflash.o(i.Get_Flash_EMPTY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Get_Flash_EMPTY
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[10e]"></a>Get_Passport</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stmflash.o(i.Get_Passport))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_Passport &rArr; STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[10f]"></a>HAL_CRC_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[93]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::Start_Motor(int)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_pwron
</UL>

<P><STRONG><a name="[111]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_Sectors
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteWord
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_Sectors
</UL>

<P><STRONG><a name="[114]"></a>HAL_FLASH_Program</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteWord
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteWord
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_Sectors
</UL>

<P><STRONG><a name="[119]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, aw9136.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; AW9136_eint_work &rArr; AW_NormalMode_Proc &rArr; AW91xx_Auto_Cali &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Home_Key_press
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_eint_work
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; AW9136_eint_work &rArr; AW_NormalMode_Proc &rArr; AW91xx_Auto_Cali &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED281_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::Start_Motor(int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_pwron
</UL>

<P><STRONG><a name="[101]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::RandomInteger()
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_MspInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
</UL>

<P><STRONG><a name="[8f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[123]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ConnectCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[12d]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[12f]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[131]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[134]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[137]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[138]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1332 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PCD_Init</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[14e]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[146]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ResumeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[13d]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>HAL_PCD_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[142]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 680 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11f]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[161]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[162]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[160]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[163]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1028 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[164]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::GetPassportArray(int*)
</UL>

<P><STRONG><a name="[165]"></a>HAL_RNG_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[167]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[169]"></a>HAL_UART_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[16a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[16]"></a>HardFault_Handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, forprintf.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>HexToDec</STRONG> (Thumb, 278 bytes, Stack size 1152 bytes, showsign.o(i.HexToDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = HexToDec &rArr; ReverseArray
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strupr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseArray
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Encode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base58_Encode
</UL>

<P><STRONG><a name="[bb]"></a>HexToString</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, showsign.o(i.HexToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HexToString
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Encode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMoney
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base58_Encode
</UL>

<P><STRONG><a name="[11a]"></a>Home_Key_press</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aw9136.o(i.Home_Key_press))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[94]"></a>I2C_read_reg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, aw9136.o(i.I2C_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Wait_Ack
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_SleepMode_Proc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW91xx_Auto_Cali
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_clear_intr
</UL>

<P><STRONG><a name="[98]"></a>I2C_write_reg</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, aw9136.o(i.I2C_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_write_reg &rArr; IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Wait_Ack
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_SleepMode_Proc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode_Proc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_LedReleaseTouch
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW91xx_Auto_Cali
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_LED_ON
</UL>

<P><STRONG><a name="[176]"></a>IIC2_Ack</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(i.IIC2_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC2_Ack &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Read_Byte
</UL>

<P><STRONG><a name="[91]"></a>IIC2_Init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, myiic.o(i.IIC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC2_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
</UL>

<P><STRONG><a name="[178]"></a>IIC2_NAck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(i.IIC2_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Read_Byte
</UL>

<P><STRONG><a name="[175]"></a>IIC2_Read_Byte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, myiic.o(i.IIC2_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_NAck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
</UL>

<P><STRONG><a name="[172]"></a>IIC2_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, myiic.o(i.IIC2_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC2_Send_Byte &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
</UL>

<P><STRONG><a name="[171]"></a>IIC2_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, myiic.o(i.IIC2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC2_Start &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
</UL>

<P><STRONG><a name="[174]"></a>IIC2_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, myiic.o(i.IIC2_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC2_Stop &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Wait_Ack
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
</UL>

<P><STRONG><a name="[173]"></a>IIC2_Wait_Ack</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, myiic.o(i.IIC2_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC2_Wait_Ack &rArr; IIC2_Stop &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_reg
</UL>

<P><STRONG><a name="[b0]"></a>InitBig</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, crypto.o(i.InitBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCsetPointGenerator
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPrivKey
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPoint
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyExit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularInvBig
</UL>

<P><STRONG><a name="[18e]"></a>LeftShift</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, crypto.o(i.LeftShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LeftShift
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
</UL>

<P><STRONG><a name="[179]"></a>MDTransform</STRONG> (Thumb, 6562 bytes, Stack size 60 bytes, ripemd160.o(i.MDTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MDTransform &rArr; DWORDFromLittleEndian
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_J
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_I
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_H
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_G
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_F
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWORDFromLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_HashData
</UL>

<P><STRONG><a name="[186]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_RegisterInterface
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>ModularAddBig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, crypto.o(i.ModularAddBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ModularAddBig &rArr; AddBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
</UL>

<P><STRONG><a name="[18c]"></a>ModularFastMul2</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, crypto.o(i.ModularFastMul2))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ModularFastMul2 &rArr; SubBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjAddPoints
</UL>

<P><STRONG><a name="[fc]"></a>ModularInvBig</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, crypto.o(i.ModularInvBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ModularInvBig &rArr; AddBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastDiv2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalize
</UL>

<P><STRONG><a name="[fe]"></a>MontyExit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, crypto.o(i.MontyExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MontyExit &rArr; MontyMul &rArr; Sub_Moduli_Big
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalize
</UL>

<P><STRONG><a name="[f5]"></a>MontyInit</STRONG> (Thumb, 874 bytes, Stack size 64 bytes, crypto.o(i.MontyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MontyInit &rArr; SubBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftShift
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountBits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZeroBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCscalarMul
</UL>

<P><STRONG><a name="[18f]"></a>MontyJacProjAddPoints</STRONG> (Thumb, 894 bytes, Stack size 72 bytes, crypto.o(i.MontyJacProjAddPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = MontyJacProjAddPoints &rArr; MontyJacProjDoublePoint &rArr; ModularFastMul2 &rArr; SubBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularFastMul2
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCcopyPoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
</UL>

<P><STRONG><a name="[190]"></a>MontyJacProjDoublePoint</STRONG> (Thumb, 778 bytes, Stack size 48 bytes, crypto.o(i.MontyJacProjDoublePoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MontyJacProjDoublePoint &rArr; ModularFastMul2 &rArr; SubBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularFastMul2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularAddBig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjAddPoints
</UL>

<P><STRONG><a name="[f7]"></a>MontyKillAll</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, crypto.o(i.MontyKillAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MontyKillAll
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCscalarMul
</UL>

<P><STRONG><a name="[fd]"></a>MontyMul</STRONG> (Thumb, 524 bytes, Stack size 80 bytes, crypto.o(i.MontyMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MontyMul &rArr; Sub_Moduli_Big
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_Moduli_Big
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjAddPoints
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyExit
</UL>

<P><STRONG><a name="[f6]"></a>NAF_Binary_PointMul</STRONG> (Thumb, 832 bytes, Stack size 176 bytes, crypto.o(i.NAF_Binary_PointMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = NAF_Binary_PointMul &rArr; MontyJacProjAddPoints &rArr; MontyJacProjDoublePoint &rArr; ModularFastMul2 &rArr; SubBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPoint
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreePoint
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCcopyPoint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjAddPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCscalarMul
</UL>

<P><STRONG><a name="[f8]"></a>Normalize</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, crypto.o(i.Normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Normalize &rArr; ModularInvBig &rArr; AddBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCcopyPoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyExit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularInvBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCscalarMul
</UL>

<P><STRONG><a name="[191]"></a>OLED281_Init</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, oled281.o(i.OLED281_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED281_Init &rArr; Fill_RAM &rArr; Set_Row_Address &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::HardwareInit()
</UL>

<P><STRONG><a name="[df]"></a>OLED_WR_Byte</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, oled281.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED281_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pattern
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Write_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Row_Address
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Block
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Con_4_byte
</UL>

<P><STRONG><a name="[61]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, irq_handler.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crypto_DeInit
</UL>

<P><STRONG><a name="[197]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGinit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGfree
</UL>

<P><STRONG><a name="[195]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_DeInit
</UL>

<P><STRONG><a name="[198]"></a>RNG_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGgenBytes
</UL>

<P><STRONG><a name="[194]"></a>RNG_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_rng.o(i.RNG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RNG_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGinit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGfree
</UL>

<P><STRONG><a name="[d2]"></a>RNGfree</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, crypto.o(i.RNGfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RNGfree &rArr; RNG_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_DeInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[fa]"></a>RNGgenBytes</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, crypto.o(i.RNGgenBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = RNGgenBytes &rArr; crl_DRBG_AES128_Generate &rArr; DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_DRBG_AES128_Generate
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
</UL>

<P><STRONG><a name="[196]"></a>RNGinit</STRONG> (Thumb, 260 bytes, Stack size 1584 bytes, crypto.o(i.RNGinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2172<LI>Call Chain = RNGinit &rArr; DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRBG_AES128_Update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRBG_AES128_Block_cipher_df
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_DeInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_init_for_sign
</UL>

<P><STRONG><a name="[d6]"></a>ReadByteLength</STRONG> (Thumb, 2872 bytes, Stack size 368 bytes, showsign.o(i.ReadByteLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ReadByteLength &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
</UL>

<P><STRONG><a name="[d7]"></a>ReadByteLengthIndex</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, showsign.o(i.ReadByteLengthIndex))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
</UL>

<P><STRONG><a name="[ea]"></a>ReverseArray</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, showsign.o(i.ReverseArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReverseArray
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToDec
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecTOAddress
</UL>

<P><STRONG><a name="[c4]"></a>Ripemd160</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ripemd160.o(i.Ripemd160))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Ripemd160 &rArr; ripemd160_EndHash &rArr; ripemd160_HashData &rArr; MDTransform &rArr; DWORDFromLittleEndian
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_HashData
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_EndHash
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetAddressFromPublic
</UL>

<P><STRONG><a name="[19c]"></a>SHA256Final</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, crypto.o(i.SHA256Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SHA256Final &rArr; SHA256Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Finish
</UL>

<P><STRONG><a name="[19e]"></a>SHA256Update</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, crypto.o(i.SHA256Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SHA256Update &rArr; SHA256Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Transform
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Append
</UL>

<P><STRONG><a name="[16d]"></a>SHA256_Append</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, crypto.o(i.SHA256_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SHA256_Append &rArr; SHA256Update &rArr; SHA256Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::Sha256(unsigned char*, unsigned, unsigned char*, unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DigestCompute
</UL>

<P><STRONG><a name="[16e]"></a>SHA256_Finish</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, crypto.o(i.SHA256_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SHA256_Finish &rArr; SHA256Final &rArr; SHA256Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Final
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::Sha256(unsigned char*, unsigned, unsigned char*, unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DigestCompute
</UL>

<P><STRONG><a name="[16c]"></a>SHA256_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, crypto.o(i.SHA256_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::Sha256(unsigned char*, unsigned, unsigned char*, unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_DigestCompute
</UL>

<P><STRONG><a name="[19f]"></a>STMFLASH_Erase_Sectors</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, stmflash.o(i.STMFLASH_Erase_Sectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STMFLASH_Erase_Sectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Passport
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Count_Num
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Set_Flag
</UL>

<P><STRONG><a name="[10b]"></a>STMFLASH_Read</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stmflash.o(i.STMFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PowerOn_SetFlag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Passport
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Count_Num
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Set_Flag
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Passport
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Address
</UL>

<P><STRONG><a name="[109]"></a>STMFLASH_ReadWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmflash.o(i.STMFLASH_ReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PowerOn_Count
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Passport
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Set_Flag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_EMPTY
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Address
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Count_Num
</UL>

<P><STRONG><a name="[1a2]"></a>STMFLASH_Write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stmflash.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = STMFLASH_Write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Passport
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Count_Num
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Set_Flag
</UL>

<P><STRONG><a name="[1a3]"></a>STMFLASH_WriteWord</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stmflash.o(i.STMFLASH_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STMFLASH_WriteWord &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Passport
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Count_Num
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Set_Flag
</UL>

<P><STRONG><a name="[af]"></a>SetZeroBig</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, crypto.o(i.SetZeroBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetZeroBig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W8_to_Big
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
</UL>

<P><STRONG><a name="[104]"></a>Set_Column_Address</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oled281.o(i.Set_Column_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_Column_Address &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pattern
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Block
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawHZ(int, int, int, view::FONT_HZ_t, bool)
</UL>

<P><STRONG><a name="[105]"></a>Set_Row_Address</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oled281.o(i.Set_Row_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_Row_Address &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pattern
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Block
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawHZ(int, int, int, view::FONT_HZ_t, bool)
</UL>

<P><STRONG><a name="[106]"></a>Set_Write_RAM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oled281.o(i.Set_Write_RAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_Write_RAM &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pattern
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Block
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawHZ(int, int, int, view::FONT_HZ_t, bool)
</UL>

<P><STRONG><a name="[1a4]"></a>Show_Pattern</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, oled281.o(i.Show_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Show_Pattern &rArr; Set_Row_Address &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Write_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Row_Address
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawPicture(unsigned char*, int, int, int, int)
</UL>

<P><STRONG><a name="[1a5]"></a>Show_num</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, oled281.o(i.Show_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Show_num &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Write_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Row_Address
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Con_4_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::GetPassportArray(int*)
</UL>

<P><STRONG><a name="[aa]"></a>StAllocBig</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, crypto.o(i.StAllocBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StAllocBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAinitSign
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPrivKey
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPoint
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitEC
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normalize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjAddPoints
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyExit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularInvBig
</UL>

<P><STRONG><a name="[f3]"></a>StFreeBig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, crypto.o(i.StFreeBig))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAinitSign
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAfreeSign
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitPoint
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitEC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreePrivKey
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreePoint
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCfreeEC
</UL>

<P><STRONG><a name="[b9]"></a>StringToHex</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, showsign.o(i.StringToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StringToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ascii2Dec
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Decode
</UL>

<P><STRONG><a name="[fb]"></a>SubBig</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, crypto.o(i.SubBig))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SubBig &rArr; Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Moduli_Big
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_Moduli_Big
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StAllocBig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZeroBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularFastMul2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularAddBig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAF_Binary_PointMul
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjDoublePoint
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyJacProjAddPoints
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModularInvBig
</UL>

<P><STRONG><a name="[ad]"></a>Sub_Moduli_Big</STRONG> (Thumb, 436 bytes, Stack size 28 bytes, crypto.o(i.Sub_Moduli_Big))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sub_Moduli_Big
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MontyMul
</UL>

<P><STRONG><a name="[1d]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, irq_handler.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>SystemClock_Config</STRONG> (Thumb, 132 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>USART2_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, irq_handler.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>USBD_CUSTOM_HID_RegisterInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_CUSTOM_HID_SendReport</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_SendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_CUSTOM_HID_SendReport &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::SendUSBData(unsigned char*, int)
</UL>

<P><STRONG><a name="[1cb]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1b4]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[1b5]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1b1]"></a>USBD_CtlError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1b0]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
</UL>

<P><STRONG><a name="[1b7]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1af]"></a>USBD_CtlSendData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Setup
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1b3]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[f]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1b8]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[187]"></a>USBD_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1be]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1a9]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DeInit
</UL>

<P><STRONG><a name="[126]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[128]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[124]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[12a]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[1bd]"></a>USBD_LL_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1cd]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[14b]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[14c]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[1ab]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>

<P><STRONG><a name="[1a8]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DataOut
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[155]"></a>USBD_LL_Reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[156]"></a>USBD_LL_Resume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[157]"></a>USBD_LL_SOF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[154]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1c2]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[15a]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[1b6]"></a>USBD_LL_StallEP</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1c7]"></a>USBD_LL_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[15e]"></a>USBD_LL_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[1ae]"></a>USBD_LL_Transmit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_SendReport
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[1c3]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[188]"></a>USBD_RegisterClass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1bf]"></a>USBD_RunTestMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1ca]"></a>USBD_SetClassConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[18a]"></a>USBD_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1c4]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1c6]"></a>USBD_StdEPReq</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1c5]"></a>USBD_StdItfReq</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[130]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[144]"></a>USB_ActivateSetup</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>USB_CoreInit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[dd]"></a>USB_DataReceiveHander</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, receiveanalysis.o(i.USB_DataReceiveHander))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DataReceiveHander &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_HID_OutEvent_FS
</UL>

<P><STRONG><a name="[12c]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[15c]"></a>USB_DevConnect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[153]"></a>USB_DevDisconnect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[152]"></a>USB_DevInit</STRONG> (Thumb, 396 bytes, Stack size 28 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[14f]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[132]"></a>USB_EP0StartXfer</STRONG> (Thumb, 426 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[136]"></a>USB_EP0_OutStart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>USB_EPClearStall</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[135]"></a>USB_EPSetStall</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[133]"></a>USB_EPStartXfer</STRONG> (Thumb, 714 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[15d]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1d0]"></a>USB_FlushRxFifo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[143]"></a>USB_FlushTxFifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>USB_GetDevSpeed</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>USB_ReadInterrupts</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>USB_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>USB_SetCurrentMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[159]"></a>USB_SetDevAddress</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[1cf]"></a>USB_SetDevSpeed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[193]"></a>USB_WritePacket</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[1d1]"></a>Updata_Set_Flag</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, stmflash.o(i.Updata_Set_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Updata_Set_Flag &rArr; STMFLASH_Erase_Sectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteWord
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_Sectors
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PowerOn_SetFlag
</UL>

<P><STRONG><a name="[1d2]"></a>Update_Count_Num</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, stmflash.o(i.Update_Count_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Update_Count_Num &rArr; STMFLASH_Erase_Sectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteWord
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_Sectors
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PowerOn_Count
</UL>

<P><STRONG><a name="[1d3]"></a>Update_Passport</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, stmflash.o(i.Update_Passport))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Update_Passport &rArr; STMFLASH_Erase_Sectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteWord
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_Sectors
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1d4]"></a>Update_PowerOn_Count</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stmflash.o(i.Update_PowerOn_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Update_PowerOn_Count &rArr; Update_Count_Num &rArr; STMFLASH_Erase_Sectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Count_Num
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Count_Num
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[1d5]"></a>Update_PowerOn_SetFlag</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stmflash.o(i.Update_PowerOn_SetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Update_PowerOn_SetFlag &rArr; Updata_Set_Flag &rArr; STMFLASH_Erase_Sectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Set_Flag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[f4]"></a>W8_to_Big</STRONG> (Thumb, 326 bytes, Stack size 28 bytes, crypto.o(i.W8_to_Big))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W8_to_Big &rArr; SetZeroBig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZeroBig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSAsign
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCsetPrivKeyValue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCinitEC
</UL>

<P><STRONG><a name="[1d6]"></a>PrivateKey::GetPublicKey(bool)</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, privatekey.o(i._ZN10PrivateKey12GetPublicKeyEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2500<LI>Call Chain = PrivateKey::GetPublicKey(bool) &rArr; Alg_GetPublicFromPrivate &rArr; RNG_init_for_sign &rArr; RNGinit &rArr; DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PublicKey::PublicKey()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PublicKey::getData() const
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1d9]"></a>PrivateKey::PrivateKey(unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, privatekey.o(i._ZN10PrivateKeyC1EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PrivateKey::PrivateKey(unsigned char*) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[233]"></a>PrivateKey::PrivateKey__sub_object(unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, privatekey.o(i._ZN10PrivateKeyC1EPh), UNUSED)

<P><STRONG><a name="[1da]"></a>ReceiveAnalysis::GetInstance()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, receiveanalysis.o(i._ZN15ReceiveAnalysis11GetInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReceiveAnalysis::GetInstance() &rArr; ReceiveAnalysis::ReceiveAnalysis()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::ReceiveAnalysis()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[1eb]"></a>ReceiveAnalysis::hashCompare(unsigned char*, unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, receiveanalysis.o(i._ZN15ReceiveAnalysis11hashCompareEPhS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReceiveAnalysis::hashCompare(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1e9]"></a>ReceiveAnalysis::isAllPackGot()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, receiveanalysis.o(i._ZN15ReceiveAnalysis12isAllPackGotEv))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1dd]"></a>ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)</STRONG> (Thumb, 6264 bytes, Stack size 1576 bytes, receiveanalysis.o(i._ZN15ReceiveAnalysis22PackDataFromPcCallbackEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 6360<LI>Call Chain = ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int) &rArr; Alg_Base58Decode &rArr; bigpow &rArr; bigmul
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ReverseU16(unsigned short)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::Commands()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::Commands(unsigned short, unsigned short)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::AppendU32(unsigned short)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::AppendU16(unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendToPc()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::CreateDataQuest(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendHidFrame(unsigned short, unsigned short, unsigned, unsigned char*, unsigned char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::getInstance()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::AppendBytes(unsigned char*, int)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::clearArea(int, int, int, int)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::clearAll()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::GetPassportArray(int*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawHZString(int, int, int, int)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::getInstance()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawxNumber(int, int, long long, int, view::FONT_t)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawPicture(unsigned char*, int, int, int, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawString(int, int, char*, view::FONT_t)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawString(int, int, char*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawNumber(int, int, long long, int, view::FONT_t)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PublicKey::getData() const
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::getData() const
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::HexToNum(unsigned char*, int, char*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ReadU32(unsigned char*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ReadU16(unsigned char*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::Sha256(unsigned char*, unsigned, unsigned char*, unsigned)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::PassportMemoryCompare(unsigned*, unsigned*, int)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::RandomInteger()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::MemoryCompare(void*, void*, int)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::PrivateKey(unsigned char*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::GetPublicKey(bool)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Passport
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Count_Num
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Set_Flag
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteWord
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Passport
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_EMPTY
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Flash_Address
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Count_Num
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetAddressFromPublic
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ECDSASignData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Encode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Decode
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::crc_frame(unsigned char*, int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::clearData()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::isAllPackGot()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::hashCompare(unsigned char*, unsigned char*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[21e]"></a>ReceiveAnalysis::Poll()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, receiveanalysis.o(i._ZN15ReceiveAnalysis4PollEv))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[1e1]"></a>ReceiveAnalysis::clearData()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, receiveanalysis.o(i._ZN15ReceiveAnalysis9clearDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::ReceiveAnalysis()
</UL>

<P><STRONG><a name="[1de]"></a>ReceiveAnalysis::crc_frame(unsigned char*, int)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, receiveanalysis.o(i._ZN15ReceiveAnalysis9crc_frameEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReceiveAnalysis::crc_frame(unsigned char*, int) &rArr; Utils::Crc32(unsigned, unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::Crc32(unsigned, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1dc]"></a>ReceiveAnalysis::ReceiveAnalysis()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, receiveanalysis.o(i._ZN15ReceiveAnalysisC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReceiveAnalysis::ReceiveAnalysis()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::clearData()
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::GetInstance()
</UL>

<P><STRONG><a name="[234]"></a>ReceiveAnalysis::ReceiveAnalysis__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, receiveanalysis.o(i._ZN15ReceiveAnalysisC1Ev), UNUSED)

<P><STRONG><a name="[1ff]"></a>Hal::SendUSBData(unsigned char*, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, hal.o(i._ZN3Hal11SendUSBDataEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Hal::SendUSBData(unsigned char*, int) &rArr; USBD_CUSTOM_HID_SendReport &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_SendReport
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendToPc()
</UL>

<P><STRONG><a name="[200]"></a>Hal::Start_Motor(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal.o(i._ZN3Hal11Start_MotorEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hal::Start_Motor(int) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[201]"></a>Hal::getInstance()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i._ZN3Hal11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal::getInstance()
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::Hal()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendToPc()
</UL>

<P><STRONG><a name="[203]"></a>Hal::HardwareInit()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal.o(i._ZN3Hal12HardwareInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Hal::HardwareInit() &rArr; AW9136_Init &rArr; I2C_read_reg &rArr; IIC2_Read_Byte &rArr; IIC2_NAck &rArr; delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED281_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
</UL>

<P><STRONG><a name="[202]"></a>Hal::Hal()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._ZN3HalC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::getInstance()
</UL>

<P><STRONG><a name="[235]"></a>Hal::Hal__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal.o(i._ZN3HalC1Ev), UNUSED)

<P><STRONG><a name="[1f8]"></a>view::DisplayMem::drawNumber(int, int, long long, int, view::FONT_t)</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, displaymem.o(i._ZN4view10DisplayMem10drawNumberEiixiNS_6FONT_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = view::DisplayMem::drawNumber(int, int, long long, int, view::FONT_t) &rArr; view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool) &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::LCD_Pow(int, int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1f9]"></a>view::DisplayMem::drawString(int, int, char*)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, displaymem.o(i._ZN4view10DisplayMem10drawStringEiiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = view::DisplayMem::drawString(int, int, char*) &rArr; view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool) &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1f7]"></a>view::DisplayMem::drawString(int, int, char*, view::FONT_t)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, displaymem.o(i._ZN4view10DisplayMem10drawStringEiiPcNS_6FONT_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = view::DisplayMem::drawString(int, int, char*, view::FONT_t) &rArr; view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool) &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1f3]"></a>view::DisplayMem::drawPicture(unsigned char*, int, int, int, int)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, displaymem.o(i._ZN4view10DisplayMem11drawPictureEPhiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = view::DisplayMem::drawPicture(unsigned char*, int, int, int, int) &rArr; Show_Pattern &rArr; Set_Row_Address &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pattern
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1fa]"></a>view::DisplayMem::drawxNumber(int, int, long long, int, view::FONT_t)</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, displaymem.o(i._ZN4view10DisplayMem11drawxNumberEiixiNS_6FONT_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = view::DisplayMem::drawxNumber(int, int, long long, int, view::FONT_t) &rArr; view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool) &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::LCD_Pow(int, int)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1f0]"></a>view::DisplayMem::getInstance()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, displaymem.o(i._ZN4view10DisplayMem11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = view::DisplayMem::getInstance()
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::DisplayMem()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_myMain_cpp_Disp
</UL>

<P><STRONG><a name="[1f2]"></a>view::DisplayMem::drawHZString(int, int, int, int)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, displaymem.o(i._ZN4view10DisplayMem12drawHZStringEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = view::DisplayMem::drawHZString(int, int, int, int) &rArr; view::DisplayMem::drawHZ(int, int, int, view::FONT_HZ_t, bool) &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawHZ(int, int, int, view::FONT_HZ_t, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1fd]"></a>view::DisplayMem::GetPassportArray(int*)</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, displaymem.o(i._ZN4view10DisplayMem16GetPassportArrayEPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = view::DisplayMem::GetPassportArray(int*) &rArr; Show_num &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[208]"></a>view::DisplayMem::drawHZ(int, int, int, view::FONT_HZ_t, bool)</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, displaymem.o(i._ZN4view10DisplayMem6drawHZEiiiNS_9FONT_HZ_tEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = view::DisplayMem::drawHZ(int, int, int, view::FONT_HZ_t, bool) &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Write_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Row_Address
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Con_4_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawHZString(int, int, int, int)
</UL>

<P><STRONG><a name="[204]"></a>view::DisplayMem::LCD_Pow(int, int)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, displaymem.o(i._ZN4view10DisplayMem7LCD_PowEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = view::DisplayMem::LCD_Pow(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawxNumber(int, int, long long, int, view::FONT_t)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawNumber(int, int, long long, int, view::FONT_t)
</UL>

<P><STRONG><a name="[205]"></a>view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool)</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, displaymem.o(i._ZN4view10DisplayMem7drawIntEiiiNS_6FONT_tEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = view::DisplayMem::drawInt(int, int, int, view::FONT_t, bool) &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Write_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Row_Address
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Con_4_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawxNumber(int, int, long long, int, view::FONT_t)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawNumber(int, int, long long, int, view::FONT_t)
</UL>

<P><STRONG><a name="[1f1]"></a>view::DisplayMem::clearAll()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, displaymem.o(i._ZN4view10DisplayMem8clearAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = view::DisplayMem::clearAll() &rArr; Fill_RAM &rArr; Set_Row_Address &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[206]"></a>view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool)</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, displaymem.o(i._ZN4view10DisplayMem8drawCharEiicNS_6FONT_tEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = view::DisplayMem::drawChar(int, int, char, view::FONT_t, bool) &rArr; Con_4_byte &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Write_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Row_Address
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Column_Address
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Con_4_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawString(int, int, char*, view::FONT_t)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawString(int, int, char*)
</UL>

<P><STRONG><a name="[1f4]"></a>view::DisplayMem::clearArea(int, int, int, int)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, displaymem.o(i._ZN4view10DisplayMem9clearAreaEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = view::DisplayMem::clearArea(int, int, int, int) &rArr; Fill_Block &rArr; Set_Row_Address &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[207]"></a>view::DisplayMem::DisplayMem()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, displaymem.o(i._ZN4view10DisplayMemC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::getInstance()
</UL>

<P><STRONG><a name="[236]"></a>view::DisplayMem::DisplayMem__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, displaymem.o(i._ZN4view10DisplayMemC1Ev), UNUSED)

<P><STRONG><a name="[1e0]"></a>Utils::ReverseU16(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utils.o(i._ZN5Utils10ReverseU16Et))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::Commands(unsigned short, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::CreateDataQuest(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendHidFrame(unsigned short, unsigned short, unsigned, unsigned char*, unsigned char)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1ee]"></a>Utils::MemoryCompare(void*, void*, int)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, utils.o(i._ZN5Utils13MemoryCompareEPvS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Utils::MemoryCompare(void*, void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1e4]"></a>Utils::RandomInteger()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, utils.o(i._ZN5Utils13RandomIntegerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Utils::RandomInteger()
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1fc]"></a>Utils::PassportMemoryCompare(unsigned*, unsigned*, int)</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, utils.o(i._ZN5Utils21PassportMemoryCompareEPjS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Utils::PassportMemoryCompare(unsigned*, unsigned*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1fe]"></a>Utils::Crc32(unsigned, unsigned char*, int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, utils.o(i._ZN5Utils5Crc32EjPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Utils::Crc32(unsigned, unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_table()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendToPc()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::crc_frame(unsigned char*, int)
</UL>

<P><STRONG><a name="[1ea]"></a>Utils::Sha256(unsigned char*, unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 86 bytes, Stack size 144 bytes, utils.o(i._ZN5Utils6Sha256EPhjS0_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Utils::Sha256(unsigned char*, unsigned, unsigned char*, unsigned) &rArr; SHA256_Finish &rArr; SHA256Final &rArr; SHA256Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Finish
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Append
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1df]"></a>Utils::ReadU16(unsigned char*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utils.o(i._ZN5Utils7ReadU16EPh))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1e2]"></a>Utils::ReadU32(unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utils.o(i._ZN5Utils7ReadU32EPh))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1fb]"></a>Utils::HexToNum(unsigned char*, int, char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, utils.o(i._ZN5Utils8HexToNumEPhiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Utils::HexToNum(unsigned char*, int, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[20a]"></a>Utils::WriteU16(unsigned short, unsigned char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utils.o(i._ZN5Utils8WriteU16EtPh))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::AppendU16(unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::CreateDataQuest(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendHidFrame(unsigned short, unsigned short, unsigned, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[20b]"></a>Utils::WriteU32(unsigned, unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utils.o(i._ZN5Utils8WriteU32EjPh))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::AppendU32(unsigned short)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendHidFrame(unsigned short, unsigned short, unsigned, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1e8]"></a>Commands::AppendBytes(unsigned char*, int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, commands.o(i._ZN8Commands11AppendBytesEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Commands::AppendBytes(unsigned char*, int) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1f5]"></a>Commands::getInstance()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, commands.o(i._ZN8Commands11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Commands::getInstance() &rArr; Commands::Commands()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::Commands()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1f6]"></a>Commands::SendHidFrame(unsigned short, unsigned short, unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, commands.o(i._ZN8Commands12SendHidFrameEttjPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Commands::SendHidFrame(unsigned short, unsigned short, unsigned, unsigned char*, unsigned char) &rArr; Commands::SendToPc() &rArr; Hal::SendUSBData(unsigned char*, int) &rArr; USBD_CUSTOM_HID_SendReport &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::WriteU32(unsigned, unsigned char*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::WriteU16(unsigned short, unsigned char*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ReverseU16(unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendToPc()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1e5]"></a>Commands::CreateDataQuest(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned)</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, commands.o(i._ZN8Commands15CreateDataQuestEttttPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Commands::CreateDataQuest(unsigned short, unsigned short, unsigned short, unsigned short, unsigned char*, unsigned) &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::WriteU16(unsigned short, unsigned char*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ReverseU16(unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1e6]"></a>Commands::SendToPc()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, commands.o(i._ZN8Commands8SendToPcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Commands::SendToPc() &rArr; Hal::SendUSBData(unsigned char*, int) &rArr; USBD_CUSTOM_HID_SendReport &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::Crc32(unsigned, unsigned char*, int)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::getInstance()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::SendUSBData(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::SendHidFrame(unsigned short, unsigned short, unsigned, unsigned char*, unsigned char)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1ed]"></a>Commands::AppendU16(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, commands.o(i._ZN8Commands9AppendU16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Commands::AppendU16(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::WriteU16(unsigned short, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::Commands(unsigned short, unsigned short)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1ec]"></a>Commands::AppendU32(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, commands.o(i._ZN8Commands9AppendU32Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Commands::AppendU32(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::WriteU32(unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1e7]"></a>Commands::Commands(unsigned short, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, commands.o(i._ZN8CommandsC1Ett))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Commands::Commands(unsigned short, unsigned short) &rArr; Commands::AppendU16(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ReverseU16(unsigned short)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::AppendU16(unsigned short)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[237]"></a>Commands::Commands__sub_object(unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, commands.o(i._ZN8CommandsC1Ett), UNUSED)

<P><STRONG><a name="[1e3]"></a>Commands::Commands()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, commands.o(i._ZN8CommandsC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Commands::Commands()
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::getInstance()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[238]"></a>Commands::Commands__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, commands.o(i._ZN8CommandsC1Ev), UNUSED)

<P><STRONG><a name="[1d7]"></a>PublicKey::PublicKey()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, publickey.o(i._ZN9PublicKeyC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::GetPublicKey(bool)
</UL>

<P><STRONG><a name="[239]"></a>PublicKey::PublicKey__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, publickey.o(i._ZN9PublicKeyC1Ev), UNUSED)

<P><STRONG><a name="[1ef]"></a>PrivateKey::getData() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, privatekey.o(i._ZNK10PrivateKey7getDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
</UL>

<P><STRONG><a name="[1d8]"></a>PublicKey::getData() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, publickey.o(i._ZNK9PublicKey7getDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::GetPublicKey(bool)
</UL>

<P><STRONG><a name="[20c]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23a]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[95]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PowerOn_Count
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW9136_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::Sha256(unsigned char*, unsigned, unsigned char*, unsigned)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrivateKey::GetPublicKey(bool)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigdiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToDec
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_right_slip
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_left_slip
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_left_release
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_left_press
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_center_double
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_SleepMode_Proc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AW_NormalMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Erase_Sectors
</UL>

<P><STRONG><a name="[219]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1db]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commands::getInstance()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::GetInstance()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::getInstance()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::getInstance()
</UL>

<P><STRONG><a name="[d5]"></a>__hardfp_pow</STRONG> (Thumb, 3044 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_ShowSignData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteLength
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMoney
</UL>

<P><STRONG><a name="[216]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[210]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[20e]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[214]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[211]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[215]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[23b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[23c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[23d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[20f]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[b7]"></a>bigadd</STRONG> (Thumb, 324 bytes, Stack size 560 bytes, bignum.o(i.bigadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = bigadd
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Decode
</UL>

<P><STRONG><a name="[e8]"></a>bigdiv</STRONG> (Thumb, 390 bytes, Stack size 560 bytes, showsign.o(i.bigdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = bigdiv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecTOAddress
</UL>

<P><STRONG><a name="[b6]"></a>bigmul</STRONG> (Thumb, 278 bytes, Stack size 576 bytes, bignum.o(i.bigmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = bigmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Decode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigpow
</UL>

<P><STRONG><a name="[b4]"></a>bigpow</STRONG> (Thumb, 214 bytes, Stack size 1064 bytes, bignum.o(i.bigpow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = bigpow &rArr; bigmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_Base58Decode
</UL>

<P><STRONG><a name="[ec]"></a>convert2to16</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, showsign.o(i.convert2to16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = convert2to16
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecToHex
</UL>

<P><STRONG><a name="[199]"></a>crl_DRBG_AES128_Generate</STRONG> (Thumb, 450 bytes, Stack size 704 bytes, crypto.o(i.crl_DRBG_AES128_Generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292<LI>Call Chain = crl_DRBG_AES128_Generate &rArr; DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_keyschedule_enc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_encrypt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRBG_AES128_Update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRBG_AES128_Block_cipher_df
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGgenBytes
</UL>

<P><STRONG><a name="[177]"></a>delay_us</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, myiic.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = delay_us &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_NAck
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Ack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Wait_Ack
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Stop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Send_Byte
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC2_Read_Byte
</UL>

<P><STRONG><a name="[213]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[72]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, forprintf.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[1aa]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_DeInit
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 6360<LI>Call Chain = main &rArr; my_main &rArr; ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int) &rArr; Alg_Base58Decode &rArr; bigpow &rArr; bigmul
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_main
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ac]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CUSTOM_HID_Init
</UL>

<P><STRONG><a name="[21d]"></a>my_main</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, mymain.o(i.my_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 6360<LI>Call Chain = my_main &rArr; ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int) &rArr; Alg_Base58Decode &rArr; bigpow &rArr; bigmul
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::Poll()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::PackDataFromPcCallback(unsigned char*, int)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveAnalysis::GetInstance()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PowerOn_SetFlag
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_PowerOn_Count
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::HardwareInit()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::getInstance()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::Start_Motor(int)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::GetPassportArray(int*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::drawString(int, int, char*)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>ripemd160_EndHash</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, ripemd160.o(i.ripemd160_EndHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ripemd160_EndHash &rArr; ripemd160_HashData &rArr; MDTransform &rArr; DWORDFromLittleEndian
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_HashData
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWORDToLittleEndian
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripemd160
</UL>

<P><STRONG><a name="[17b]"></a>ripemd160_F</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ripemd160.o(i.ripemd160_F))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDTransform
</UL>

<P><STRONG><a name="[17c]"></a>ripemd160_G</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ripemd160.o(i.ripemd160_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ripemd160_G
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDTransform
</UL>

<P><STRONG><a name="[17d]"></a>ripemd160_H</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ripemd160.o(i.ripemd160_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ripemd160_H
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDTransform
</UL>

<P><STRONG><a name="[19a]"></a>ripemd160_HashData</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ripemd160.o(i.ripemd160_HashData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ripemd160_HashData &rArr; MDTransform &rArr; DWORDFromLittleEndian
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDTransform
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ripemd160_EndHash
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripemd160
</UL>

<P><STRONG><a name="[17e]"></a>ripemd160_I</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ripemd160.o(i.ripemd160_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ripemd160_I
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDTransform
</UL>

<P><STRONG><a name="[17f]"></a>ripemd160_J</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ripemd160.o(i.ripemd160_J))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ripemd160_J
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDTransform
</UL>

<P><STRONG><a name="[212]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[170]"></a>strupr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, showsign.o(i.strupr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strupr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToDec
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b2]"></a>USBD_ClrFeature</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1b9]"></a>USBD_GetConfig</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ba]"></a>USBD_GetDescriptor</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1bc]"></a>USBD_GetLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[1bb]"></a>USBD_GetStatus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c8]"></a>USBD_SetAddress</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c9]"></a>USBD_SetConfig</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1cc]"></a>USBD_SetFeature</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[6]"></a>USBD_CUSTOM_HID_DataIn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_CUSTOM_HID_DataOut</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CUSTOM_HID_DataOut &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_CUSTOM_HID_DeInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CUSTOM_HID_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_CUSTOM_HID_EP0_RxReady</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CUSTOM_HID_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_CUSTOM_HID_GetCfgDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBD_CUSTOM_HID_GetDeviceQualifierDesc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_GetDeviceQualifierDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_CUSTOM_HID_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_CUSTOM_HID_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_CUSTOM_HID_Setup</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, usbd_customhid.o(i.USBD_CUSTOM_HID_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CUSTOM_HID_Setup &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_customhid.o(.data)
</UL>
<P><STRONG><a name="[180]"></a>MX_CRC_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>MX_GPIO_Init</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>MX_RNG_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.MX_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_RNG_Init &rArr; HAL_RNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>MX_UART4_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>CUSTOM_HID_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>CUSTOM_HID_Init_FS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_Init_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>CUSTOM_HID_OutEvent_FS</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_custom_hid_if.o(i.CUSTOM_HID_OutEvent_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CUSTOM_HID_OutEvent_FS &rArr; USB_DataReceiveHander &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DataReceiveHander
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_custom_hid_if.o(.data)
</UL>
<P><STRONG><a name="[1ce]"></a>USB_CoreReset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[112]"></a>FLASH_MassErase</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_MassErase
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[140]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>FLASH_Program_Byte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[118]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[116]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[117]"></a>FLASH_Program_Word</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[102]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[121]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[122]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[16b]"></a>UART_SetConfig</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[73]"></a>__sti___10_myMain_cpp_Disp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mymain.o(i.__sti___10_myMain_cpp_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___10_myMain_cpp_Disp &rArr; view::DisplayMem::getInstance()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view::DisplayMem::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mymain.o(.init_array)
</UL>
<P><STRONG><a name="[209]"></a>make_table()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, utils.o(i._Z10make_tablev))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::Crc32(unsigned, unsigned char*, int)
</UL>

<P><STRONG><a name="[192]"></a>delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oled281.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_ms &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED281_Init
</UL>

<P><STRONG><a name="[d3]"></a>HASH_DigestCompute</STRONG> (Thumb, 84 bytes, Stack size 144 bytes, encrypt.o(i.HASH_DigestCompute))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = HASH_DigestCompute &rArr; SHA256_Finish &rArr; SHA256Final &rArr; SHA256Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Finish
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_HashData
</UL>

<P><STRONG><a name="[c7]"></a>RNG_init_for_sign</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, encrypt.o(i.RNG_init_for_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2244<LI>Call Chain = RNG_init_for_sign &rArr; RNGinit &rArr; DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGinit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alg_GetPublicFromPrivate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECCKeyPairSignGenerate
</UL>

<P><STRONG><a name="[ae]"></a>Add_Moduli_Big</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, crypto.o(i.Add_Moduli_Big))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Add_Moduli_Big &rArr; CopyBig
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBig
</UL>

<P><STRONG><a name="[e2]"></a>DRBG_AES128_Block_cipher_df</STRONG> (Thumb, 378 bytes, Stack size 552 bytes, crypto.o(i.DRBG_AES128_Block_cipher_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = DRBG_AES128_Block_cipher_df &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_keyschedule_enc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_encrypt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGinit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_DRBG_AES128_Generate
</UL>

<P><STRONG><a name="[e7]"></a>DRBG_AES128_Update</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, crypto.o(i.DRBG_AES128_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DRBG_AES128_Update &rArr; AES128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNGinit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crl_DRBG_AES128_Generate
</UL>

<P><STRONG><a name="[19d]"></a>SHA256Transform</STRONG> (Thumb, 588 bytes, Stack size 296 bytes, crypto.o(i.SHA256Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SHA256Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Update
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Final
</UL>

<P><STRONG><a name="[20d]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[21b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
